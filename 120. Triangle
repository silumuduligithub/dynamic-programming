// in memoization
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        return memoization(triangle, 0, 0, new Integer[triangle.size()][triangle.size()]);
    }
    public int memoization(List<List<Integer>> triangle, int sr, int sc, Integer[][] storage){
        if(sr == triangle.size() - 1)return triangle.get(sr).get(sc);
        if(storage[sr][sc] != null)return storage[sr][sc];
        int down = memoization(triangle, sr + 1, sc, storage);
        int diagonal = memoization(triangle, sr + 1, sc + 1, storage);
        storage[sr][sc] = triangle.get(sr).get(sc) + Math.min(down, diagonal);
        return storage[sr][sc];
    }
}

// in tabulation
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int[][] storage = new int[n][n];
        for(int i = n - 1; i >= 0; i--){
            for(int j = 0; j <= i; j++){
                if(i == n - 1){
                    storage[i][j] = triangle.get(i).get(j);
                    continue;
                }
                int down = storage[i + 1][j];
                int diagonal = storage[i + 1][j + 1];
                storage[i][j] = triangle.get(i).get(j) + Math.min(down, diagonal);
            }
        }
        return storage[0][0];
    }
}
