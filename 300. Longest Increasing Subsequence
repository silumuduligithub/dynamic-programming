 // timeComplexity is O(n ^ n)
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int maxLen = 0;
        int[] dp = new int[n];
        for(int i = 0; i < n; i++){
            int max = 0;
            for(int j = i - 1; j >= 0; j--){
                if(nums[i] > nums[j]){
                    max = Math.max(dp[j], max);
                }
            }
            dp[i] = max + 1;
            maxLen = Math.max(dp[i], maxLen);
        }
        return maxLen;
    }
}

// time complexity is O(nlogn)

class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        int ans = 0;
        for(int i = 0; i < nums.length; i++){
            int low = 0;
            int high = ans;
            while(low < high){
                int mid = low +(high - low) / 2;
                if(dp[mid] < nums[i])low = mid + 1;
                else high = mid;
            }
            dp[low] = nums[i];
            if(low == ans)ans++;
        }
        return ans;
    }
}
