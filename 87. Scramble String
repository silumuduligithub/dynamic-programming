class Solution {
    public boolean isScramble(String s1, String s2) {
        if(s1.equals(s2))return true;
        if(s1.length() != s2.length())return false;
        HashMap<String, Boolean> map = new HashMap<>();
        return checkScramble(s1, s2, map);
    }
    public boolean checkScramble(String s1, String s2, HashMap<String, Boolean> map){
        if(s1.equals(s2)){
            map.put(s1+"#"+s2, true);
            return true;
        }
        else if(s1.length() == 1)return false;
        else if(map.containsKey(s1+"#"+s2))return map.get(s1+"#"+s2);
        for(int k = 1; k < s1.length(); k++){
            boolean cond1 = checkScramble(s1.substring(0, k), s2.substring(0, k), map) && checkScramble(s1.substring(k), s2.substring(k), map);
            boolean cond2 = checkScramble(s1.substring(0, k), s2.substring(s2.length() - k), map) && checkScramble(s1.substring(k), s2.substring(0, s2.length() - k), map);
            if(cond1 || cond2){
                map.put(s1+"#"+s2, true);
                return true;
            }
        }
         map.put(s1+"#"+s2, false);
        return false;
    }
}
