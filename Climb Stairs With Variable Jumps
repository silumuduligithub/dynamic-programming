Climb Stairs With Variable Jumps
You are given a number n, representing the number of stairs in a staircase. You are on the 0th step and are required to climb to the top.

You are given n numbers in an array jumps, where ith element's value represents - till how far from the step you could jump to in a single move. You can of course jump fewer number of steps in the move.

Return the number of ways to reach the top via different paths.

Input Format
On the first line you are given n, the size of the array jumps.

On the next line there are n spaced integers that represent the elements of the array jumps.

Output Format
Return the number of ways to reach the top via different paths.

Example 1
Input

6
3 3 0 2 2 3
Output

8
Explanation

We have total 8 unique ways to reach from the 0th step to the 6th step.
Example 2
Input

6
2 1 3 3 3 2
Output

14
Explanation

We have total 14 unique ways to reach from the 0th step to the 6th step.
Constraints
1 <= n <= 20

1 <= jump[i] <= 20





import java.util.*;

class Solution {
    public int stairWays(int[] jump) {
       int res = memo(jump, 0, jump.length, new int[jump.length + 1]);
		return res;
    }
	public int memo(int[] jump, int src, int dest, int[] storage){
		if(src > dest)return 0;
		if(src == dest)return 1;
		if(storage[src] != 0)return storage[src];
		int ways = 0;
		for(int i = 1; i <= jump[src]; i++){
			ways += memo(jump, src + i, dest, storage);
		}
		storage[src] = ways;
		return ways;
	}
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++)
            arr[i] = sc.nextInt();
        Solution Obj = new Solution();
        int res = Obj.stairWays(arr);
        System.out.println(res);
        sc.close();
    }
}
