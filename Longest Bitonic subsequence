class Solution
{
    public int[] lisLeftToRight(int[] nums){
        int[] lis= new int[nums.length];
        // nums[0] = 1;
        for(int i = 0; i < nums.length; i++){
            int max = 0;
            for(int j = 0; j < i; j++){
                if(nums[i] > nums[j]){
                    max = Math.max(max, lis[j]);
                }
            }
            lis[i] = 1 + max;
        }
        return lis;
    }
    public int[] ldsRightToLeft(int[] nums){
        int[] lds = new int[nums.length];
        // lds[nums.length - 1] = 1;
        for(int i = nums.length -1; i >= 0; i--){
            int max = 0;
            for(int j = nums.length - 1; j > i; j--){
                if(nums[i] > nums[j]){
                    max = Math.max(lds[j], max);
                }
            }
            lds[i] = max + 1;
        }
        return lds;
    }
    public int LongestBitonicSequence(int[] nums)
    {
        // Code here
        int[] lis = lisLeftToRight(nums);
        int[] lds = ldsRightToLeft(nums);
        int res = 0;
        for(int i = 0; i < nums.length; i++){
            res = Math.max(res, (lis[i] + lds[i]) - 1);
        }
        return res;
    }
}
