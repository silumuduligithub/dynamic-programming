class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
        Integer[][] storage = new Integer[grid.length][grid[0].length];
        if(grid[grid.length - 1][grid[0].length - 1] == 1)return 0;
        return respectedPath(grid, 0, 0, grid.length, grid[0].length, storage);
    }
    public int respectedPath(int[][] grid, int sr, int sc, int erow, int ecol, Integer[][]storage){
        if(sr >= erow || sc >= ecol)return 0;
        if(sr == erow - 1 && sc == ecol - 1)return 1;
        if(grid[sr][sc] == 1)return 0;
        if(storage[sr][sc] != null)return storage[sr][sc];
        int right = respectedPath(grid, sr + 1, sc, erow, ecol, storage);
        int down = respectedPath(grid, sr, sc + 1, erow, ecol, storage);
        storage[sr][sc] = down + right;
        return storage[sr][sc];
    }
}
