Maximum Gold
You are given a 2-dimensional array of size N x M. It represents a gold mine. Each field in this mine contains a positive integer which is the amount of gold that cell contains.

Initially a miner can start from any row in the first column.

From a given cell, the miner can move

to the cell diagonally up towards the right

to the right

to the cell diagonally down towards the right

Find out maximum amount of gold which he can collect.

Input Format
In example input, the first line contains two integer n and m denoting the length of row and column of the 2d-array.

The next n lines contains m space-seperated integers denoting elements of the 2d-array.

Output Format
For each test case, return an integer denoting the the maximum gold.

Example 1
Input

1 5
2 3 1 1 4
Output

11
Explanation

The miner would start at the first cell and go on collecting all the gold available. Thus the answer is 11.
Example 2
Input

3 3
1 3 3
2 1 4
0 6 4
Output

12
Explanation

The miner would start at 1 column 2nd row. Then he will go to 3rd row 2nd column and finally to 2nd row 3rd column. Thus in total he collects 2 + 6 + 4 = 12.
Constraints
1 <= N <= 50

1 <= M <= 50

0 <= a[i][j] <= 100




import java.io.*;
import java.util.*;

class Main{
    public static void main(String args[])throws IOException
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int M[][] = new int[n][m];
        for(int i = 0;i < n*m;i++){
            M[i/m][i%m] = sc.nextInt();
        }
        
        Solution ob = new Solution();
        System.out.println(ob.maxGold(n, m, M));
    }
} 

class Solution{
    public static int maxGold(int n, int m, int M[][]){
        //Write code here
		int res = 0;
		int[][] storage = new int[n][m];
		for(int i = 0; i < n; i++){
			int subres = getMaximumGold(M, i, 0, storage);
			res = Math.max(res, subres);
		}
		return res;
    }   
	public static int getMaximumGold(int mat[][], int row, int col, int storage[][]){
		if(row < 0 || row >= mat.length || col < 0 || col  >= mat[0].length)return 0;
		if(col == mat[0].length)return mat[row][col];
		if(storage[row][col] != 0)return storage[row][col];
		int up = getMaximumGold(mat, row - 1, col + 1, storage);
		int right = getMaximumGold(mat, row, col + 1, storage);
		int down = getMaximumGold(mat, row + 1, col + 1, storage);
		int gold = Math.max(up, Math.max(right, down));
		storage[row][col] = gold+ mat[row][col];
		return storage[row][col];
	}
}
