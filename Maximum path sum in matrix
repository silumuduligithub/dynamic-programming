class Solution{
    static int maximumPath(int N, int Matrix[][])
    {
        // code here
        int[][] dp = new int[N][N];
        int res = 0;
        for(int i = 0; i < N; i++){   
            int subres = generateMaximumPath(Matrix, 0, i, N,dp);
            res = Math.max(res, subres);
        }
        return res;
    }
    static int generateMaximumPath(int[][] mat, int i, int j, int n, int[][] dp){
        if(i >= n || j >= n || i < 0 || j < 0)return Integer.MIN_VALUE;
        if(i == n - 1)return mat[i][j];
        if(dp[i][j] != 0)return dp[i][j];
        int left = generateMaximumPath(mat, i + 1, j, n, dp);
        int right = generateMaximumPath(mat, i + 1, j - 1, n, dp);
        int digo = generateMaximumPath(mat, i + 1, j + 1, n, dp);
        int max = Math.max(left, Math.max(right, digo));
        dp[i][j] = max + mat[i][j];
        return dp[i][j];
    }
}
