// here the time complexity is O(nlogn) because we sort the array on the basis of nums[i][1]
class Solution {
    class Pair implements Comparable<Pair>{
        int ev1;
        int ev2;
        Pair(int ev1, int ev2){
            this.ev1 = ev1;
            this.ev2 = ev2;
        }
        public int compareTo(Pair o){
            if(this.ev2 == o.ev2)return o.ev1 - this.ev1;
            return this.ev2 - o.ev2;
        }
    }
    public int maxEnvelopes(int[][] envelopes) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for(int[] envelope : envelopes){
            int ev1 = envelope[0];
            int ev2 = envelope[1];
            pq.add(new Pair(ev1, ev2));
        }
        int i = 0;
        while(pq.size() > 0){
            Pair rpair = pq.remove();
            envelopes[i][0] = rpair.ev1;
            envelopes[i++][1] = rpair.ev2;
        }
        int[] storage = new int[envelopes.length];
        int ans = 0;
        for(i = 0; i < envelopes.length; i++){
            int low = 0;
            int high = ans;
            while(low < high){
                int mid = (low + high)/ 2;
                if(storage[mid] < envelopes[i][0])low = mid + 1;
                else high = mid;
            }
            storage[low] = envelopes[i][0];
            if(low == ans)ans++;
        }
        return ans;
    }
}
