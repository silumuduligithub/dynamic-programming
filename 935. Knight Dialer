class Solution {
    int mod = (int) 1e9 + 7;
    public int helper(int digit, int rem, List<List<Integer>> graph, Integer[][] dp){
        if(rem == 0){
            return 1;
        }
        if(dp[digit][rem] != null)return dp[digit][rem];
        int ans = 0;
        for(int nextDig : graph.get(digit)){
            ans = ((ans % mod) + helper(nextDig, rem - 1, graph, dp) % mod) % mod;
        }
        return dp[digit][rem] = ans;
    }
    public int knightDialer(int n) {
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i <= 9; i++){
            graph.add(new ArrayList<>());
        }
        Collections.addAll(graph.get(0), 4, 6);
        Collections.addAll(graph.get(1),8, 6);
        Collections.addAll(graph.get(2),7, 9);
        Collections.addAll(graph.get(3),4, 8);
        Collections.addAll(graph.get(4),3, 9, 0);
        Collections.addAll(graph.get(6),1, 7, 0);
        Collections.addAll(graph.get(7),2, 6);
        Collections.addAll(graph.get(8),1, 3);
        Collections.addAll(graph.get(9),4, 2);
        int ans = 0;
        for(int digit = 0; digit <= 9; digit++){
            ans = ((ans % mod)+ helper(digit, n - 1, graph, new Integer[10][n + 1]) % mod) % mod;
        }
        return ans % mod;
    }
}
